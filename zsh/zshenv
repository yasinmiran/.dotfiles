#!/usr/bin/env zsh

# MIT License
#
# Copyright (c) 2021 Yasin Miran
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# How we can group zsh related files in a directory?
#
# There is practically only one way it can reliably work and be portable
# setting $ZDOTDIR in your $HOME/.zshenv and the rest of your configuration
# in $ZDOTDIR/.... If you only use one specific window manager/desktop
# environment you could look up their init files and if they are called
# before the shell session. Since this is not portable we tend to copy
# the files directly into the $HOME.

# ======================================================================================
# Functions
# ======================================================================================

# Check the existence of a passed command but discard
# the outcome through redirection whether its successful
# or erroneous. The callee must use the exit code to
# determine whether its available or not.
#
# References:
# https://askubuntu.com/a/1005292
# https://tldp.org/LDP/abs/html/io-redirection.html
#
# Terminology:
# File descriptor 0 is the standard input (stdin). [Keyboard]
# File descriptor 1 is the standard output (stdout). [Display]
# File descriptor 2 is the standard error (stderr). [Display]
#
# Also be worth noting that the same semantics are often
# achieved with the idiom &>/dev/null
function exists() {
  command -v "$1" 1>/dev/null 2>&1
}

# A function that ask a question and waits for a
# YES or NO answer from the stdin.
function ask() {
  local prompt default reply
  if [[ ${2:-} == 'Y' ]]; then
    prompt='Y/n'
    default='Y'
  elif [[ ${2:-} == 'N' ]]; then
    prompt='y/N'
    default='N'
  else
    prompt='y/n'
    default=''
  fi
  while true; do
    # Ask the question (not using "read -p" as
    # it uses stderr not stdout)
    echo -n "$1 [$prompt] "
    # Read the answer (use /dev/tty in case stdin is
    # redirected from somewhere else)
    read -r reply </dev/tty
    # Default?
    if [[ -z $reply ]]; then
      reply=$default
    fi
    # Check if the reply is valid
    case "$reply" in
    Y* | y*) return 0 ;;
    N* | n*) return 1 ;;
    esac
  done
}

function is_directory() {
  if [[ -n $1 ]] && [[ -d $1 ]]; then
    return 1
  fi
  return 0
}

function is_file() {
  if [[ -n $1 ]] && [[ -f $1 ]]; then
    return 1
  fi
  return 0
}

function get_file_extension() {
  # TODO re implement this
  # For example, take filename example.tar.gz
  # local filename="${FILE%%.*}"             # example
  # local filename_with_sub_ext="${FILE%.*}" # example.tar
  # local file_all_ext="${FILE#*.}"          # tar.gz
  # local file_top_ext="${1##*.}" # gz
  local filename=$(basename -- "$1")
  echo "${filename##*.}"
}

# Find and replace all the strings matching target
# in a specified file.
function frepl() {
  sed -i.bak "s/$1/$2/g" "$3"
}
