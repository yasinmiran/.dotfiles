#!/usr/bin/env zsh

# MIT License
#
# Copyright (c) 2021 Yasin Miran
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Some cool shell variables:
#
# $COLUMNS        Number of columns to use in Terminal view
# $DIRSTACK       List of directories used by the pushd and popd commands
# $GROUPS         Various groups with which the user is associated
# $HISTFILE       File containing the shell history
# $HOME           Home directory for the user
# $HOSTNAME       Name of the system on which the shell is running
# $LINES          Number of lines currently being used by the shell
# $PATH           List of directories the shell uses to resolve commands
# $PS1            String used as the primary prompt
# $PS2            String used as the secondary prompt
# $SHELL          Shell program being used
# $SHELLOPTS      Options in effect for the shell
# $TERM           Type of terminal that the shell is displaying its content to
# $UID            User ID of the currently logged-in user
# $USER           Username of the currently logged-in user
# $PWD            Present working directory
# _ (underscore)  Previously executed command
# $?              Previous command exit code 0...127

# ======================================================================================
# Oh-My-Zsh Configurations
# ======================================================================================

# Path to oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
export ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# Caution: this setting can cause issues with multiline prompts (zsh 5.7.1 and newer seem to work)
# See https://github.com/ohmyzsh/ohmyzsh/issues/5765
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
#
# You can set one of the optional three formats:
# "mm/dd/yyyy", "dd.mm.yyyy", "yyyy-mm-dd" or set a custom format using the
# strftime function format specifications, see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# ======================================================================================
# Exports
# ======================================================================================

export PARTY="ü•≥"
export ONLY_BREW="üç∫"
export TICK="‚úÖ"
export LOL="üòÇ"

export DEVELOPMENT_DIR="$HOME/development"
export BINARIES_DIR="$HOME/binaries"
export DOTFILES_DIR="$HOME/.dotfiles"
export TOMCAT_HOME="/Users/yasin/Desktop/apache-tomcat-9.0.43/"
export JAVA_HOME="$(/usr/libexec/java_home -v1.8)"
export PATH="$PATH:/Users/yasin/binaries/flutter/bin"

# ======================================================================================
# Aliases
# ======================================================================================

alias ..="cd .."                      # go back one directory
alias ...="cd ../.."                  # go back two directories
alias ....="cd ../../.."              # go back four directories
alias .....="cd ../../../.."          # go back five directories
alias ......="cd ../../../../.."      # go back six directories
alias ~="cd ~"                        # go to home but `cd` is probably faster to type.
alias -- -="cd -"                     # go to old directory == cd $OLDPWD

alias d="cd ~/Documents"              # go to documents
alias dl="cd ~/Downloads"             # go to downloads
alias dt="cd ~/Desktop"               # go to desktop
alias dev='cd $DEVELOPMENT_DIR'       # go to dev working directory
alias bins='cd $BINARIES_DIR'         # go to binaries directory

alias ls="exa -laFh --git"            # Descriptive ls
alias exa="exa -laFh --git"           # Alias for default exa
alias cls="clear"                     # Good old cls

# ======================================================================================
# Functions
# ======================================================================================

# Abbreviated for: Go up by N number of directories.
# This function can go up *n number of directories
# upwards. If you are in a nested folder just executing
# `$ gupnod 10` will move you up 10 directories.
function gupnod() {

  # Reference of present working directory
  local c_dir && c_dir="$(pwd)"

  if [[ "${1}" == "" ]]; then
    c_dir="$(dirname "${c_dir}")"
  elif ! [[ "${1}" =~ ^[0-9]{1,2}$ ]]; then
    echo "Error: argument must be a number"
  elif ! [[ "${1}" -gt "0" ]]; then
    echo "Error: argument must be positive"
  else
    # Go through each dirname
    for ((i = 0; i < ${1}; i++)); do
      local n_cdir && n_cdir="$(dirname "${c_dir}")"
      if [[ "${c_dir}" == "${n_cdir}" ]]; then
        break
      else
        c_dir="${n_cdir}"
      fi
    done
  fi

  cd "${c_dir}" || exit

}

# Abbreviated: Organize my shit
# This function can organize the files based on their
# type. It will create directories with the extension
# name without conflicting the existing folders.
function oms() {

  if [[ $PWD == "$DEVELOPMENT_DIR" ]] || [[ $PWD == "$BINARIES_DIR" ]]; then
    echo "Illegal operation. You cannot operate 'oms' on development or binaries directories!"
    return 0
  fi
  if [[ $PWD == "$HOME" ]]; then
    echo "Forbidden operation. You cannot operate 'oms' on home dir $LOL."
    return 0
  fi

}

# Abbreviated for: Append to $PATH
# This function will append a path to $PATH
# and source the self itself.
function atop() {
  local path && path=${1}
  if [[ -n "$path" ]]; then
    if [[ -d "$path" ]]; then
      export PATH="$PATH:$path"
    else
      echo "Nothing done. The path is not a directory!"
    fi
  fi
}

# Abbreviated for: Make directory and Change directory.
# This function will create the given directory and
# cd into it immediately.
function mkcd() {
  mkdir -p "$1" && cd "$1" || exit
}

# Abbreviated for: Go to dotfiles directory
# This function will navigate to the dotfiles directory
# from any directory. Instead of having to issue cd and
# the path just calling this is easier.
function gtdfd() {
  cd "$DOTFILES_DIR" || exit
}

# ======================================================================================
# Default Command Executions
#
# Below this section is dedicated to source all the necessary environment and other
# source files for zsh. Note that some of the oh-my-zsh related ones are also sourced
# here to ensure consistency across files.
# ======================================================================================

echo -e "\nA new $(ps -o comm= $$) session created with pid $$" &&
  echo -e "ZSH VERSION: $ZSH_VERSION" &&
  source "$DOTFILES_DIR/git/defaults" &&
  source "$DOTFILES_DIR/brew/defaults" &&
  echo -e "$USER's zsh environment is ready to $PARTY.\n"
