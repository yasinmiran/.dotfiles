#!/usr/bin/env zsh

# MIT License
#
# Copyright (c) 2021 Yasin Miran
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# ======================================================================================
# Exports
# ======================================================================================

# Some cool shell variables:
#
# $COLUMNS        Number of columns to use in Terminal view
# $DIRSTACK       List of directories used by the pushd and popd commands
# $GROUPS         Various groups with which the user is associated
# $HISTFILE       File containing the shell history
# $HOME           Home directory for the user
# $HOSTNAME       Name of the system on which the shell is running
# $LINES          Number of lines currently being used by the shell
# $PATH           List of directories the shell uses to resolve commands
# $PS1            String used as the primary prompt
# $PS2            String used as the secondary prompt
# $SHELL          Shell program being used
# $SHELLOPTS      Options in effect for the shell
# $TERM           Type of terminal that the shell is displaying its content to
# $UID            User ID of the currently logged-in user
# $USER           Username of the currently logged-in user
# $PWD            Present working directory
# _ (underscore)  Previously executed command
# $?              Previous command exit code 0...127

export DEVELOPMENT_DIR="$HOME/development"
export BINARIES_DIR="$HOME/binaries"
export DOTFILES_DIR="$HOME/.dotfiles"

export OMZ_INSTALLATION_PATH="$HOME/.oh-my-zsh"

export TOMCAT_HOME="/Users/yasin/Desktop/apache-tomcat-9.0.43"
export JAVA_HOME="$(/usr/libexec/java_home -v1.8)"
export PATH="$PATH:/Users/yasin/binaries/flutter/bin"

# ======================================================================================
# Aliases
# ======================================================================================

alias ..="cd .."                         # go back one directory
alias ...="cd ../.."                     # go back two directories
alias ....="cd ../../.."                 # go back four directories
alias .....="cd ../../../.."             # go back five directories
alias ......="cd ../../../../.."         # go back six directories
alias ~="cd ~"                           # go to home but `cd` is probably faster to type.
alias -- -="cd -"                        # go to old directory == cd $OLDPWD

alias d="cd ~/Documents"                 # go to documents
alias dl="cd ~/Downloads"                # go to downloads
alias dt="cd ~/Desktop"                  # go to desktop
alias dev='cd $DEVELOPMENT_DIR'          # go to dev working directory
alias bins='cd $BINARIES_DIR'            # go to binaries directory
alias gtdfd='cd "$DOTFILES_DIR" || exit' # Go to dotfiles directory

alias ls="exa -laFh --git"  # Descriptive ls
alias exa="exa -laFh --git" # Alias for default exa
alias cls="clear"           # Good old cls
alias rrr="exec zsh"        # Relaunch zsh

# Since we use oh-my-zsh there will lots of aliases loaded
# to the env. However, I want some commands the way I want
# so I'm overriding the similar existing ones with mine.
PERSONAL_ALIASES=$(alias -L)

# ======================================================================================
# Functions
# ======================================================================================

# Abbreviated for: Go up by N number of directories.
# This function can go up *n number of directories
# upwards. If you are in a nested folder just executing
# `$ gupnod 10` will move you up 10 directories.
function gupnod() {

  # Reference of present working directory
  local c_dir && c_dir="$(pwd)"

  if [[ "${1}" == "" ]]; then
    c_dir="$(dirname "${c_dir}")"
  elif ! [[ "${1}" =~ ^[0-9]{1,2}$ ]]; then
    echo "Error: argument must be a number"
  elif ! [[ "${1}" -gt "0" ]]; then
    echo "Error: argument must be positive"
  else
    # Go through each dirname
    for ((i = 0; i < ${1}; i++)); do
      local n_cdir && n_cdir="$(dirname "${c_dir}")"
      if [[ "${c_dir}" == "${n_cdir}" ]]; then
        break
      else
        c_dir="${n_cdir}"
      fi
    done
  fi

  cd "${c_dir}" || exit

}

# Abbreviated: Organize my shit
#
# This function can organize the files based on their type. It is very
# much similar to macOS stacks however, it will create directories with
# the extension name instead of their category type.
#
# This function can operate without conflicting the existing folders.
# FIXME: this function is still WIP
function oms() {

  if [[ $PWD == "$DEVELOPMENT_DIR" ]] || [[ $PWD == "$BINARIES_DIR" ]]; then
    echo "Illegal operation. You cannot operate 'oms' on development or binaries directories!"
    return 0
  fi
  if [[ $PWD == "$HOME" ]]; then
    echo "Forbidden operation. You cannot operate 'oms' on home dir ðŸ˜‚."
    return 0
  fi

  local cdir=$PWD

  for i in "$cdir"/*; do

    # if its a directory then we won't recurse instead,
    # we will put it into a dir called `stacks_dirs`.
    if is_directory "$i"; then
      mkdir -p "$cdir/stacks_dirs"
      echo "Moving $i to $cdir/stacks_dirs"
      continue
      # mv "$i" "$cdir/stacks_dirs/"
    fi

    if is_file "$i"; then
      ext=$(get_file_extension "$i")
      echo "File extension is $ext"
      if [[ -n "$ext" ]] && [ "$ext" != "." ]; then
        mkdir -p "$cdir/$ext"
        echo "Moving $i to $cdir/$ext/"
        # mv "$i" "$cdir/$ext/"
      else
        mkdir -p "$cdir/stacks_no_ext"
        echo "Moving $i to $cdir/stacks_no_ext/"
        # mv "$i" "$cdir/stacks_no_ext/"
      fi
    fi

  done

}

# Abbreviated for: Append to $PATH
# This function will append a path to $PATH
# and source the self itself.
function atop() {
  local path && path=${1}
  if [[ -n "$path" ]] && [[ -d "$path" ]]; then
    export PATH="$PATH:$path"
  else
    echo "Nothing done. Path is invalid!"
  fi
}

# Abbreviated for: Make directory and Change directory.
# This function will create the given directory and
# cd into it immediately.
function mkcd() {
  echo "Creating directory $1 and navigating you into it." &&
    mkdir -p "$1" && cd "$1" || exit
}

# ======================================================================================
# Default Command Executions
#
# Below this section is dedicated to source all the necessary environment and other
# source files for zsh. Note that some of the oh-my-zsh related ones are also sourced
# here to ensure consistency across files.
# ======================================================================================

echo -e "\nA new $(ps -o comm= $$) session created with pid $$"
echo -e "ZSH VERSION: $ZSH_VERSION"
. "$DOTFILES_DIR/zsh/oh_my_zsh"
. "$DOTFILES_DIR/git/defaults"
. "$DOTFILES_DIR/brew/defaults"
. "$DOTFILES_DIR/workplace/wso2"
# Now evaluate and add my aliases.
eval "$PERSONAL_ALIASES"
unset PERSONAL_ALIASES
echo -e "$USER's zsh environment is ready to ðŸ¥³.\n"
